<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var path = "Abio.Library\\DatabaseModels\\";
var fileDirectories = Directory.GetDirectories(path);
Dictionary<string,List<string>> dictionaryOfLookupFiles = new Dictionary<string,List<string>>();
foreach (var schema in fileDirectories)
{
	List<string> files = new List<string>();
	var schemaFiles = Directory.GetFiles(schema);
	foreach (var schemaFile in schemaFiles)
	{
		files.Add(Path.GetFileNameWithoutExtension(schemaFile));
	}
	dictionaryOfLookupFiles.Add(schema,files);
}

foreach(var key in dictionaryOfLookupFiles.Keys)
{
	foreach(var abioClass in dictionaryOfLookupFiles[key])
	{
		var classNameLower = string.Concat(abioClass.ToString().ToLower());
		var classNameUpper = abioClass;
		// Lookup schema is the only tables we currently use and int for id. Except for Item, just in case for some reason we have over 2.2 billion items i guess. 
		var idType = key.EndsWith("Lookup") && abioClass != "Item" ? "int" : "Guid"; 
		var idName = classNameUpper == "Friend"
					|| classNameUpper == "Player"
					? "UserId" : $"{classNameUpper}Id";

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Abio.Library.DatabaseModels;
using Attribute = Abio.Library.DatabaseModels.Attribute;


namespace Abio.WS.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
	
	public class <#= classNameUpper #>sController : ControllerBase
	{
		private readonly AbioContext _context;

		public <#= classNameUpper #>sController(AbioContext context)
		{
			_context = context;
		}

        [HttpGet]
        public async Task<ActionResult<IEnumerable<<#= classNameUpper #>>>> Get<#= classNameUpper #>()
        {
          if (_context.<#= classNameUpper #> == null)
          {
              return NotFound();
          }
            return await _context.<#= classNameUpper #>.ToListAsync();
        }

		[HttpGet("{id}")]
		public async Task<ActionResult<<#= classNameUpper #>>> Get<#= classNameUpper #>(<#= idType #> id)
		{
          if (_context.<#= classNameUpper #> == null)
          {
              return NotFound();
          }
            var <#= classNameLower #> = await _context.<#= classNameUpper #>.FindAsync(id);

            if (<#= classNameLower #>  == null)
            {
                return NotFound();
            }

            return <#= classNameLower #>;
        }

		[HttpPut("{id}")]
        public async Task<IActionResult> Put<#= classNameUpper #>(<#= idType #> id, <#= classNameUpper #> <#= classNameLower #>)
        {
            if (id != <#= classNameLower #>.<#= idName #>)
            {
                return BadRequest();
            }

            _context.Entry(<#= classNameLower #>).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= classNameUpper #>Exists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        [HttpPost]
        public async Task<ActionResult<<#= classNameUpper #>>> Post<#= classNameUpper #>(<#= classNameUpper #> <#= classNameLower #>)
        {
          if (_context.<#= classNameUpper #> == null)
          {
              return Problem("Entity set 'AbioContext.<#= classNameUpper #>'  is null.");
          }
            _context.<#= classNameUpper #>.Add(<#= classNameLower #>);
            try
            {
                  <# if (idType == "Guid") { this.Write($"{classNameLower}.{idName} = Guid.NewGuid();"); } #>

                  <# if (idType == "Guid") { this.Write($"if (this.{classNameUpper}Exists({classNameLower}.{idName}))"); } #>

                  <# if (idType == "Guid") { this.Write("{"); } #>
                  <# if (idType == "Guid") { this.Write($"  {classNameLower}.{idName} = Guid.NewGuid();"); } #>
                  <# if (idType == "Guid") { this.Write("}"); } #>
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                if (<#= classNameUpper #>Exists(<#= classNameLower #>.<#= idName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return CreatedAtAction("Get<#= classNameUpper #>", new { id = <#= classNameLower #>.<#= idName #> }, <#= classNameLower #>);
        }
        
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete<#= classNameUpper #>(<#= idType #> id)
        {
            if (_context.<#= classNameUpper #> == null)
            {
                return NotFound();
            }
            var <#= classNameLower #> = await _context.<#= classNameUpper #>.FindAsync(id);
            if (<#= classNameLower #> == null)
            {
                return NotFound();
            }

            _context.<#= classNameUpper #>.Remove(<#= classNameLower #>);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool <#= classNameUpper #>Exists(<#= idType #> id)
        {
            return (_context.<#= classNameUpper #>?.Any(e => e.<#= idName #> == id)).GetValueOrDefault();
        }
	}
}

<#

  SaveOutput($"{classNameUpper}sController.cs");
  //Uncomment following to write to separate folder 1,2,3
  //SaveOutputToSubFolder(i.ToString(),"Content" + i.ToString() + ".txt");
}
}
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
private void SaveOutputToSubFolder(string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string newDirectoryName = Path.Combine(templateDirectory,folderName);
  if(!Directory.Exists(newDirectoryName))
    Directory.CreateDirectory(newDirectoryName);
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
#>