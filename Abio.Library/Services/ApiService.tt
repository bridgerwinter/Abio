<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var path = "Abio.Library\\DatabaseModels\\";
var fileDirectories = Directory.GetDirectories(path);
Dictionary<string,List<string>> dictionaryOfLookupFiles = new Dictionary<string,List<string>>();
foreach (var schema in fileDirectories)
{
	List<string> files = new List<string>();
	var schemaFiles = Directory.GetFiles(schema);
	foreach (var schemaFile in schemaFiles)
	{
		files.Add(Path.GetFileNameWithoutExtension(schemaFile));
	}
	dictionaryOfLookupFiles.Add(schema,files);
}
#>
using Abio.Library.DatabaseModels;
using Newtonsoft.Json;
using System.Text;
using Attribute = Abio.Library.DatabaseModels.Attribute;

namespace Abio.Library.Services
{	
	public partial class ApiService
	{
		<#
			foreach(var key in dictionaryOfLookupFiles.Keys)
			{
				foreach(var abioClass in dictionaryOfLookupFiles[key])
				{
					var classNameLower = string.Concat(abioClass.ToString().ToLower());
					var classNameUpper = abioClass;
					// Lookup schema is the only tables we currently use and int for id.
					var idType = key.EndsWith("Lookup") ? "int" : "Guid"; 
					var idName = classNameUpper == "Friend"
								|| classNameUpper == "Player"

								? "UserId" : $"{classNameUpper}Id";
		#>

		// POST (CREATE)
		public static async Task<HttpResponseMessage> Create<#= classNameUpper #>(<#= classNameUpper #> <#= classNameLower #>)
		{
			string jsonChore = JsonConvert.SerializeObject(<#= classNameLower #>);
			StringContent httpContent = new StringContent(jsonChore, Encoding.UTF8, "application/json");
			HttpResponseMessage result = await Constants.GetClient().PostAsync(Constants.<#= classNameUpper #>Url, httpContent);
			return result;
		}

		// GET
		public static async Task<<#= classNameUpper #>> Get<#= classNameUpper #>(<#= idType #> id)
		{
			var url = Constants.<#= classNameUpper #>Url + id.ToString();
			string result = await Constants.GetClient().GetStringAsync(url);
			var deserializedResult = JsonConvert.DeserializeObject<<#= classNameUpper #>>(result);
			return deserializedResult;
		}

		// GET ALL
		public static async Task<List<<#= classNameUpper #>>> GetAll<#= classNameUpper #>s()
		{
			var url = Constants.<#= classNameUpper #>Url.ToString();
			string result = await Constants.GetClient().GetStringAsync(url);
			var deserializedResult = JsonConvert.DeserializeObject<List<<#= classNameUpper  #>>>(result);
			return deserializedResult;
		}

		// PUT (UPDATE)
		public static async Task<HttpResponseMessage> Update<#= classNameUpper #>(<#= classNameUpper #> <#= classNameLower #>)
		{
			var url = Constants.<#= classNameUpper #>Url + <#= classNameLower #>.<#= idName #>.ToString();
			string jsonChore = JsonConvert.SerializeObject(<#= classNameLower #>);
			StringContent httpContent = new StringContent(jsonChore, Encoding.UTF8, "application/json");
			HttpResponseMessage result = await Constants.GetClient().PutAsync(url,httpContent);
			return result;
		}

		// DELETE (UPDATE)
		public static async Task<HttpResponseMessage> Delete<#= classNameUpper #>(<#= classNameUpper #> <#= classNameLower #>)
		{
			var url = Constants.<#= classNameUpper #>Url + <#= classNameLower #>.<#= idName #>.ToString();
			string jsonChore = JsonConvert.SerializeObject(<#= classNameLower #>);
			StringContent httpContent = new StringContent(jsonChore, Encoding.UTF8, "application/json");
			HttpResponseMessage result = await Constants.GetClient().DeleteAsync(url);
			return result;
		}
		
		<#
				}
			}

		#>

	}
}


