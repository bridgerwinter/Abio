// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Abio.Library.DatabaseModels;

public partial class AbioContext : DbContext
{
    public AbioContext(DbContextOptions<AbioContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Building> Buildings { get; set; }

    public virtual DbSet<BuildingsLevel> BuildingsLevels { get; set; }

    public virtual DbSet<ConstructedBuilding> ConstructedBuildings { get; set; }

    public virtual DbSet<Faction> Factions { get; set; }

    public virtual DbSet<Friend> Friends { get; set; }

    public virtual DbSet<HiredLeader> HiredLeaders { get; set; }

    public virtual DbSet<HiredLeaderStat> HiredLeaderStats { get; set; }

    public virtual DbSet<HiredUnit> HiredUnits { get; set; }

    public virtual DbSet<HiredUnitsStat> HiredUnitsStats { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemInventory> ItemInventories { get; set; }

    public virtual DbSet<Market> Markets { get; set; }

    public virtual DbSet<MarketListing> MarketListings { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<ResearchedTechnology> ResearchedTechnologies { get; set; }

    public virtual DbSet<Resource> Resources { get; set; }

    public virtual DbSet<ResourceInventory> ResourceInventories { get; set; }

    public virtual DbSet<Technology> Technologies { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<UnitGroup> UnitGroups { get; set; }

    public virtual DbSet<UnitLevel> UnitLevels { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserCitiesLeader> UserCitiesLeaders { get; set; }

    public virtual DbSet<UserCity> UserCities { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Abio.SQL;Integrated Security=true");

        modelBuilder.Entity<Building>(entity =>
        {
            entity.ToTable("Buildings", "Lookup");

            entity.Property(e => e.BuildingId).ValueGeneratedNever();
            entity.Property(e => e.BuildingName).IsUnicode(false);

            entity.HasOne(d => d.Faction).WithMany(p => p.Buildings).HasForeignKey(d => d.FactionId);
        });

        modelBuilder.Entity<BuildingsLevel>(entity =>
        {
            entity.HasKey(e => e.BuildingLevelId);

            entity.ToTable("BuildingsLevels", "Lookup");

            entity.Property(e => e.BuildingLevelId).ValueGeneratedNever();
            entity.Property(e => e.BuildingRankName).IsUnicode(false);
        });

        modelBuilder.Entity<ConstructedBuilding>(entity =>
        {
            entity.HasKey(e => e.ConstructuredBuildingId);

            entity.ToTable("ConstructedBuildings", "Player");

            entity.Property(e => e.ConstructuredBuildingId).ValueGeneratedNever();
            entity.Property(e => e.created_at)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Building).WithMany(p => p.ConstructedBuildings).HasForeignKey(d => d.BuildingId);

            entity.HasOne(d => d.BuildingLevelNavigation).WithMany(p => p.ConstructedBuildings).HasForeignKey(d => d.BuildingLevel);

            entity.HasOne(d => d.User).WithMany(p => p.ConstructedBuildings).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Faction>(entity =>
        {
            entity.ToTable("Factions", "Lookup");

            entity.Property(e => e.FactionId).ValueGeneratedNever();
            entity.Property(e => e.FactionName).IsUnicode(false);
        });

        modelBuilder.Entity<Friend>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Friends", "Player");

            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.FriendsWithNavigation).WithMany(p => p.Friends).HasForeignKey(d => d.FriendsWith);
        });

        modelBuilder.Entity<HiredLeader>(entity =>
        {
            entity.ToTable("HiredLeaders", "Player");

            entity.Property(e => e.HiredLeaderId).ValueGeneratedNever();
            entity.Property(e => e.HiredLeaderName)
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.created_at)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.User).WithMany(p => p.HiredLeaders).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<HiredLeaderStat>(entity =>
        {
            entity.HasKey(e => e.HiredLeaderStatsId);

            entity.ToTable("HiredLeaderStats", "Player");

            entity.Property(e => e.HiredLeaderStatsId).ValueGeneratedNever();

            entity.HasOne(d => d.HiredLeader).WithMany(p => p.HiredLeaderStats).HasForeignKey(d => d.HiredLeaderId);
        });

        modelBuilder.Entity<HiredUnit>(entity =>
        {
            entity.ToTable("HiredUnits", "Player");

            entity.Property(e => e.HiredUnitId).ValueGeneratedNever();
            entity.Property(e => e.created_at)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.HiredLeader).WithMany(p => p.HiredUnits).HasForeignKey(d => d.HiredLeaderId);

            entity.HasOne(d => d.Unit).WithMany(p => p.HiredUnits).HasForeignKey(d => d.UnitId);

            entity.HasOne(d => d.UnitLevelNavigation).WithMany(p => p.HiredUnits).HasForeignKey(d => d.UnitLevel);

            entity.HasOne(d => d.User).WithMany(p => p.HiredUnits).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<HiredUnitsStat>(entity =>
        {
            entity.HasKey(e => e.HiredUnitStatsId);

            entity.ToTable("HiredUnitsStats", "Player");

            entity.Property(e => e.HiredUnitStatsId).ValueGeneratedNever();

            entity.HasOne(d => d.HiredUnit).WithMany(p => p.HiredUnitsStats).HasForeignKey(d => d.HiredUnitId);
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.ToTable("Items", "Lookup");

            entity.Property(e => e.ItemId).ValueGeneratedNever();
            entity.Property(e => e.ItemDescription).IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ItemInventory>(entity =>
        {
            entity.ToTable("ItemInventory", "Player");

            entity.Property(e => e.ItemInventoryId).ValueGeneratedNever();

            entity.HasOne(d => d.Item).WithMany(p => p.ItemInventories).HasForeignKey(d => d.ItemId);

            entity.HasOne(d => d.User).WithMany(p => p.ItemInventories).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Market>(entity =>
        {
            entity.ToTable("Markets", "Economy");

            entity.Property(e => e.MarketId).ValueGeneratedNever();
            entity.Property(e => e.MarketName).IsUnicode(false);
        });

        modelBuilder.Entity<MarketListing>(entity =>
        {
            entity.HasKey(e => e.ListingId);

            entity.ToTable("MarketListings", "Economy");

            entity.Property(e => e.ListingId).ValueGeneratedNever();

            entity.HasOne(d => d.Item).WithMany(p => p.MarketListings).HasForeignKey(d => d.ItemId);

            entity.HasOne(d => d.ItemInventory).WithMany(p => p.MarketListings).HasForeignKey(d => d.ItemInventoryId);

            entity.HasOne(d => d.Market).WithMany(p => p.MarketListings).HasForeignKey(d => d.MarketId);

            entity.HasOne(d => d.User).WithMany(p => p.MarketListings).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Players", "Player");

            entity.HasOne(d => d.User).WithMany().HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<ResearchedTechnology>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ResearchedTechnology", "Player");

            entity.Property(e => e.created_at)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Technology).WithMany().HasForeignKey(d => d.TechnologyId);
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.ToTable("Resources", "Lookup");

            entity.Property(e => e.ResourceId).ValueGeneratedNever();
            entity.Property(e => e.ResourceName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ResourceInventory>(entity =>
        {
            entity.ToTable("ResourceInventory", "Player");

            entity.Property(e => e.ResourceInventoryId).ValueGeneratedNever();

            entity.HasOne(d => d.Resource).WithMany(p => p.ResourceInventories).HasForeignKey(d => d.ResourceId);

            entity.HasOne(d => d.User).WithMany(p => p.ResourceInventories).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Technology>(entity =>
        {
            entity.ToTable("Technology", "Lookup");

            entity.Property(e => e.TechnologyId).ValueGeneratedNever();
            entity.Property(e => e.TechnologyName).IsUnicode(false);
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.ToTable("Units", "Lookup");

            entity.Property(e => e.UnitId).ValueGeneratedNever();
            entity.Property(e => e.UnitName).IsUnicode(false);

            entity.HasOne(d => d.Faction).WithMany(p => p.Units).HasForeignKey(d => d.FactionId);
        });

        modelBuilder.Entity<UnitGroup>(entity =>
        {
            entity.HasKey(e => e.UnitGroupsId);

            entity.ToTable("UnitGroups", "Player");

            entity.Property(e => e.UnitGroupsId).ValueGeneratedNever();

            entity.HasOne(d => d.HiredLeader).WithMany(p => p.UnitGroups).HasForeignKey(d => d.HiredLeaderId);

            entity.HasOne(d => d.HiredUnit).WithMany(p => p.UnitGroups).HasForeignKey(d => d.HiredUnitId);
        });

        modelBuilder.Entity<UnitLevel>(entity =>
        {
            entity.ToTable("UnitLevels", "Lookup");

            entity.Property(e => e.UnitLevelId).ValueGeneratedNever();
            entity.Property(e => e.UnitRankName).IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("Users", "Security");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.created_at)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<UserCitiesLeader>(entity =>
        {
            entity.HasKey(e => e.UserCityLeadersId);

            entity.ToTable("UserCitiesLeaders", "Player");

            entity.Property(e => e.UserCityLeadersId).ValueGeneratedNever();

            entity.HasOne(d => d.City).WithMany(p => p.UserCitiesLeaders).HasForeignKey(d => d.CityId);

            entity.HasOne(d => d.HiredLeader).WithMany(p => p.UserCitiesLeaders).HasForeignKey(d => d.HiredLeaderId);

            entity.HasOne(d => d.User).WithMany(p => p.UserCitiesLeaders).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<UserCity>(entity =>
        {
            entity.HasKey(e => e.CityId);

            entity.ToTable("UserCities", "Player");

            entity.Property(e => e.CityId).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithMany(p => p.UserCities).HasForeignKey(d => d.UserId);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}